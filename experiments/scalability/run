#!/bin/env python2.7
"""
Runs the scalability experiment.

Author: Jason White
"""
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import absolute_import
from __future__ import division

# Add project directory to the python path.
from os import path, devnull
import sys
sys.path.append(path.dirname(path.realpath(path.join(__file__, '../..'))))

import tools.plotter as plotter
from time import time
import algorithms.slicetree as st
import algorithms.fourier.fourier as fourier
import numpy as np

import tools.graph_reader as graph_reader
from tools.paths import synthetic
import tools.reduce as r

dataset = synthetic

def slicetree_time(data_file, graph_file, budget):
    null = open(devnull, "wb")
    start = time()
    partsizes = path.join("/tmp", path.splitext(path.basename(data_file))[0] + ".sizes")
    st.precompute(data_file, graph_file, partsizes, stdout=null)
    st.greedy(data_file, graph_file, partsizes, budget, radius=2, numthreads=1, stdout=null)
    return time() - start

def fourier_time(data_file, graph_file, budget):
    start = time()
    translation, data = graph_reader.read_nodes(open(data_file, "rb"))
    graph = graph_reader.read_edges(open(graph_file, "rb"), translation)
    fourier.compress(graph, data, budget, f=open("/dev/null", "wb"))
    return time() - start

if __name__ == "__main__":

    times = []

    # Read in the network
    with open(dataset.data, "r") as fdata:
        data = r.read_data(fdata)

    with open(dataset.graph, "r") as fgraph:
        graph = r.read_graph(fgraph)

    # Budget (# of partitions or eigenvectors)
    b = 50

    # Continually reduce the graph to these numbers of nodes
    for n in range(100, 1001):
        data_file = "/tmp/data"
        graph_file = "/tmp/graph"

        with open(data_file, "w") as fdataout, \
                open(graph_file, "w") as fgraphout:
            print("Reducing to %d nodes..." % n, file=sys.stderr)
            r.reduce_graph(data, graph, n, fdataout, fgraphout)

        print("Calculating Slice Tree...", file=sys.stderr)
        t1 = slicetree_time(data_file, graph_file, budget=b)

        print("Calculating Fourier...", file=sys.stderr)
        t2 = fourier_time(data_file, graph_file, budget=b)

        print("%d,%f,%f" % (n, t1, t2))
        sys.stdout.flush()

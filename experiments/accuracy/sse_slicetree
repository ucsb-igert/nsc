#!/bin/env python2.7
"""
Runs the accuracy experiment.

Author: Jason White
"""
from __future__ import print_function, unicode_literals, absolute_import, division

# Add project directory to the python path.
from os import path, pipe
import os
import sys
sys.path.append(path.dirname(path.realpath(path.join(__file__, '../..'))))

import tools.plotter as plotter
from time import time
import algorithms.slicetree as st
import algorithms.fourier.fourier as fourier
import subprocess

import tools.graph_reader as graph_reader
import tools.paths.synthetic as dataset
import tools.reduce as r

def slice_tree_sse(data_file, graph_file, slices):
    args = st.greedy(data_file, graph_file, partsizes, numpart=slices, radius=2, numthreads=1)
    output = subprocess.check_output(args)
    results = st.parse_output(output)
    return results["budget"], results["sse"]

def parse_arguments():
    import argparse

    parser = argparse.ArgumentParser(
        description="Computes the SSE for a range of budgets on the given dataset."
        )
    parser.add_argument("data", help="Data input file.")
    parser.add_argument("graph", help="Graph input file.")

    return parser.parse_args()

if __name__ == "__main__":

    #args = parse_arguments()
    #data_file, graph_file = args.data, args.graph

    data_file, graph_file = dataset.reductions[1000]

    # Pre-compute partition sizes
    partsizes = path.join("/tmp", path.splitext(path.basename(data_file))[0] + ".sizes")
    subprocess.check_call(st.precompute(data_file, graph_file, partsizes))

    # Find the number of nodes in the graph
    with open(data_file, "r") as data:
        num_nodes = graph_reader.count_nodes(data)

    for i in range(2, num_nodes, 10):
        print("%d,%d" % slice_tree_sse(data_file, graph_file, i))
        sys.stdout.flush()

    # Delete pre-computed partition sizes
    os.remove(partsizes)
